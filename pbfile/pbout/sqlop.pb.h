// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sqlop.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_sqlop_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sqlop_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sqlop_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sqlop_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sqlop_2eproto;
namespace sql {
class player_info;
struct player_infoDefaultTypeInternal;
extern player_infoDefaultTypeInternal _player_info_default_instance_;
class player_info_array;
struct player_info_arrayDefaultTypeInternal;
extern player_info_arrayDefaultTypeInternal _player_info_array_default_instance_;
class player_info_kv_int;
struct player_info_kv_intDefaultTypeInternal;
extern player_info_kv_intDefaultTypeInternal _player_info_kv_int_default_instance_;
class player_info_kv_str;
struct player_info_kv_strDefaultTypeInternal;
extern player_info_kv_strDefaultTypeInternal _player_info_kv_str_default_instance_;
class player_single_info;
struct player_single_infoDefaultTypeInternal;
extern player_single_infoDefaultTypeInternal _player_single_info_default_instance_;
}  // namespace sql
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sql {

// ===================================================================


// -------------------------------------------------------------------

class player_single_info final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sql.player_single_info) */ {
 public:
  inline player_single_info() : player_single_info(nullptr) {}
  ~player_single_info() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR player_single_info(
      ::google::protobuf::internal::ConstantInitialized);

  inline player_single_info(const player_single_info& from) : player_single_info(nullptr, from) {}
  inline player_single_info(player_single_info&& from) noexcept
      : player_single_info(nullptr, std::move(from)) {}
  inline player_single_info& operator=(const player_single_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_single_info& operator=(player_single_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const player_single_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const player_single_info* internal_default_instance() {
    return reinterpret_cast<const player_single_info*>(
        &_player_single_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(player_single_info& a, player_single_info& b) { a.Swap(&b); }
  inline void Swap(player_single_info* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_single_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  player_single_info* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<player_single_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const player_single_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const player_single_info& from) { player_single_info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(player_single_info* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "sql.player_single_info"; }

 protected:
  explicit player_single_info(::google::protobuf::Arena* arena);
  player_single_info(::google::protobuf::Arena* arena, const player_single_info& from);
  player_single_info(::google::protobuf::Arena* arena, player_single_info&& from) noexcept
      : player_single_info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUuidFieldNumber = 2,
    kNamesFieldNumber = 3,
    kGuidFieldNumber = 1,
    kAvatarFieldNumber = 4,
  };
  // bytes uuid = 2;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // string names = 3;
  void clear_names() ;
  const std::string& names() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_names(Arg_&& arg, Args_... args);
  std::string* mutable_names();
  PROTOBUF_NODISCARD std::string* release_names();
  void set_allocated_names(std::string* value);

  private:
  const std::string& _internal_names() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_names(
      const std::string& value);
  std::string* _internal_mutable_names();

  public:
  // uint64 guid = 1;
  void clear_guid() ;
  ::uint64_t guid() const;
  void set_guid(::uint64_t value);

  private:
  ::uint64_t _internal_guid() const;
  void _internal_set_guid(::uint64_t value);

  public:
  // int32 avatar = 4;
  void clear_avatar() ;
  ::int32_t avatar() const;
  void set_avatar(::int32_t value);

  private:
  ::int32_t _internal_avatar() const;
  void _internal_set_avatar(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sql.player_single_info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      36, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_player_single_info_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const player_single_info& from_msg);
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::google::protobuf::internal::ArenaStringPtr names_;
    ::uint64_t guid_;
    ::int32_t avatar_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sqlop_2eproto;
};
// -------------------------------------------------------------------

class player_info_kv_str final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sql.player_info_kv_str) */ {
 public:
  inline player_info_kv_str() : player_info_kv_str(nullptr) {}
  ~player_info_kv_str() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR player_info_kv_str(
      ::google::protobuf::internal::ConstantInitialized);

  inline player_info_kv_str(const player_info_kv_str& from) : player_info_kv_str(nullptr, from) {}
  inline player_info_kv_str(player_info_kv_str&& from) noexcept
      : player_info_kv_str(nullptr, std::move(from)) {}
  inline player_info_kv_str& operator=(const player_info_kv_str& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_info_kv_str& operator=(player_info_kv_str&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const player_info_kv_str& default_instance() {
    return *internal_default_instance();
  }
  static inline const player_info_kv_str* internal_default_instance() {
    return reinterpret_cast<const player_info_kv_str*>(
        &_player_info_kv_str_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(player_info_kv_str& a, player_info_kv_str& b) { a.Swap(&b); }
  inline void Swap(player_info_kv_str* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_info_kv_str* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  player_info_kv_str* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<player_info_kv_str>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const player_info_kv_str& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const player_info_kv_str& from) { player_info_kv_str::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(player_info_kv_str* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "sql.player_info_kv_str"; }

 protected:
  explicit player_info_kv_str(::google::protobuf::Arena* arena);
  player_info_kv_str(::google::protobuf::Arena* arena, const player_info_kv_str& from);
  player_info_kv_str(::google::protobuf::Arena* arena, player_info_kv_str&& from) noexcept
      : player_info_kv_str(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, std::size_t size);
  void set_data(int index, absl::string_view value);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, std::size_t size);
  void add_data(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:sql.player_info_kv_str)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_player_info_kv_str_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const player_info_kv_str& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sqlop_2eproto;
};
// -------------------------------------------------------------------

class player_info_kv_int final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sql.player_info_kv_int) */ {
 public:
  inline player_info_kv_int() : player_info_kv_int(nullptr) {}
  ~player_info_kv_int() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR player_info_kv_int(
      ::google::protobuf::internal::ConstantInitialized);

  inline player_info_kv_int(const player_info_kv_int& from) : player_info_kv_int(nullptr, from) {}
  inline player_info_kv_int(player_info_kv_int&& from) noexcept
      : player_info_kv_int(nullptr, std::move(from)) {}
  inline player_info_kv_int& operator=(const player_info_kv_int& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_info_kv_int& operator=(player_info_kv_int&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const player_info_kv_int& default_instance() {
    return *internal_default_instance();
  }
  static inline const player_info_kv_int* internal_default_instance() {
    return reinterpret_cast<const player_info_kv_int*>(
        &_player_info_kv_int_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(player_info_kv_int& a, player_info_kv_int& b) { a.Swap(&b); }
  inline void Swap(player_info_kv_int* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_info_kv_int* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  player_info_kv_int* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<player_info_kv_int>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const player_info_kv_int& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const player_info_kv_int& from) { player_info_kv_int::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(player_info_kv_int* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "sql.player_info_kv_int"; }

 protected:
  explicit player_info_kv_int(::google::protobuf::Arena* arena);
  player_info_kv_int(::google::protobuf::Arena* arena, const player_info_kv_int& from);
  player_info_kv_int(::google::protobuf::Arena* arena, player_info_kv_int&& from) noexcept
      : player_info_kv_int(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, std::size_t size);
  void set_data(int index, absl::string_view value);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, std::size_t size);
  void add_data(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:sql.player_info_kv_int)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_player_info_kv_int_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const player_info_kv_int& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sqlop_2eproto;
};
// -------------------------------------------------------------------

class player_info_array final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sql.player_info_array) */ {
 public:
  inline player_info_array() : player_info_array(nullptr) {}
  ~player_info_array() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR player_info_array(
      ::google::protobuf::internal::ConstantInitialized);

  inline player_info_array(const player_info_array& from) : player_info_array(nullptr, from) {}
  inline player_info_array(player_info_array&& from) noexcept
      : player_info_array(nullptr, std::move(from)) {}
  inline player_info_array& operator=(const player_info_array& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_info_array& operator=(player_info_array&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const player_info_array& default_instance() {
    return *internal_default_instance();
  }
  static inline const player_info_array* internal_default_instance() {
    return reinterpret_cast<const player_info_array*>(
        &_player_info_array_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(player_info_array& a, player_info_array& b) { a.Swap(&b); }
  inline void Swap(player_info_array* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_info_array* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  player_info_array* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<player_info_array>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const player_info_array& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const player_info_array& from) { player_info_array::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(player_info_array* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "sql.player_info_array"; }

 protected:
  explicit player_info_array(::google::protobuf::Arena* arena);
  player_info_array(::google::protobuf::Arena* arena, const player_info_array& from);
  player_info_array(::google::protobuf::Arena* arena, player_info_array&& from) noexcept
      : player_info_array(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int64 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::int64_t data(int index) const;
  void set_data(int index, ::int64_t value);
  void add_data(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& data() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_data();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_data() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:sql.player_info_array)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_player_info_array_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const player_info_array& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> data_;
    mutable ::google::protobuf::internal::CachedSize _data_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sqlop_2eproto;
};
// -------------------------------------------------------------------

class player_info final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sql.player_info) */ {
 public:
  inline player_info() : player_info(nullptr) {}
  ~player_info() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR player_info(
      ::google::protobuf::internal::ConstantInitialized);

  inline player_info(const player_info& from) : player_info(nullptr, from) {}
  inline player_info(player_info&& from) noexcept
      : player_info(nullptr, std::move(from)) {}
  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_info& operator=(player_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const player_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const player_info* internal_default_instance() {
    return reinterpret_cast<const player_info*>(
        &_player_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(player_info& a, player_info& b) { a.Swap(&b); }
  inline void Swap(player_info* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  player_info* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<player_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const player_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const player_info& from) { player_info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(player_info* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "sql.player_info"; }

 protected:
  explicit player_info(::google::protobuf::Arena* arena);
  player_info(::google::protobuf::Arena* arena, const player_info& from);
  player_info(::google::protobuf::Arena* arena, player_info&& from) noexcept
      : player_info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSingleFieldNumber = 1,
    kArrayFieldNumber = 2,
    kKvIntFieldNumber = 3,
    kKvStrFieldNumber = 4,
  };
  // .sql.player_single_info single = 1;
  bool has_single() const;
  void clear_single() ;
  const ::sql::player_single_info& single() const;
  PROTOBUF_NODISCARD ::sql::player_single_info* release_single();
  ::sql::player_single_info* mutable_single();
  void set_allocated_single(::sql::player_single_info* value);
  void unsafe_arena_set_allocated_single(::sql::player_single_info* value);
  ::sql::player_single_info* unsafe_arena_release_single();

  private:
  const ::sql::player_single_info& _internal_single() const;
  ::sql::player_single_info* _internal_mutable_single();

  public:
  // .sql.player_info_array array = 2;
  bool has_array() const;
  void clear_array() ;
  const ::sql::player_info_array& array() const;
  PROTOBUF_NODISCARD ::sql::player_info_array* release_array();
  ::sql::player_info_array* mutable_array();
  void set_allocated_array(::sql::player_info_array* value);
  void unsafe_arena_set_allocated_array(::sql::player_info_array* value);
  ::sql::player_info_array* unsafe_arena_release_array();

  private:
  const ::sql::player_info_array& _internal_array() const;
  ::sql::player_info_array* _internal_mutable_array();

  public:
  // .sql.player_info_kv_int kv_int = 3;
  bool has_kv_int() const;
  void clear_kv_int() ;
  const ::sql::player_info_kv_int& kv_int() const;
  PROTOBUF_NODISCARD ::sql::player_info_kv_int* release_kv_int();
  ::sql::player_info_kv_int* mutable_kv_int();
  void set_allocated_kv_int(::sql::player_info_kv_int* value);
  void unsafe_arena_set_allocated_kv_int(::sql::player_info_kv_int* value);
  ::sql::player_info_kv_int* unsafe_arena_release_kv_int();

  private:
  const ::sql::player_info_kv_int& _internal_kv_int() const;
  ::sql::player_info_kv_int* _internal_mutable_kv_int();

  public:
  // .sql.player_info_kv_str kv_str = 4;
  bool has_kv_str() const;
  void clear_kv_str() ;
  const ::sql::player_info_kv_str& kv_str() const;
  PROTOBUF_NODISCARD ::sql::player_info_kv_str* release_kv_str();
  ::sql::player_info_kv_str* mutable_kv_str();
  void set_allocated_kv_str(::sql::player_info_kv_str* value);
  void unsafe_arena_set_allocated_kv_str(::sql::player_info_kv_str* value);
  ::sql::player_info_kv_str* unsafe_arena_release_kv_str();

  private:
  const ::sql::player_info_kv_str& _internal_kv_str() const;
  ::sql::player_info_kv_str* _internal_mutable_kv_str();

  public:
  // @@protoc_insertion_point(class_scope:sql.player_info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_player_info_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const player_info& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sql::player_single_info* single_;
    ::sql::player_info_array* array_;
    ::sql::player_info_kv_int* kv_int_;
    ::sql::player_info_kv_str* kv_str_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sqlop_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// player_info_array

// repeated int64 data = 1;
inline int player_info_array::_internal_data_size() const {
  return _internal_data().size();
}
inline int player_info_array::data_size() const {
  return _internal_data_size();
}
inline void player_info_array::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::int64_t player_info_array::data(int index) const {
  // @@protoc_insertion_point(field_get:sql.player_info_array.data)
  return _internal_data().Get(index);
}
inline void player_info_array::set_data(int index, ::int64_t value) {
  _internal_mutable_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:sql.player_info_array.data)
}
inline void player_info_array::add_data(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add(value);
  // @@protoc_insertion_point(field_add:sql.player_info_array.data)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& player_info_array::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sql.player_info_array.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedField<::int64_t>* player_info_array::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sql.player_info_array.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
player_info_array::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* player_info_array::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// player_info_kv_int

// repeated string data = 1;
inline int player_info_kv_int::_internal_data_size() const {
  return _internal_data().size();
}
inline int player_info_kv_int::data_size() const {
  return _internal_data_size();
}
inline void player_info_kv_int::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline std::string* player_info_kv_int::add_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:sql.player_info_kv_int.data)
  return _s;
}
inline const std::string& player_info_kv_int::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_info_kv_int.data)
  return _internal_data().Get(index);
}
inline std::string* player_info_kv_int::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sql.player_info_kv_int.data)
  return _internal_mutable_data()->Mutable(index);
}
inline void player_info_kv_int::set_data(int index, const std::string& value) {
  _internal_mutable_data()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::set_data(int index, std::string&& value) {
  _internal_mutable_data()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::set_data(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_data()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::set_data(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_data()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::set_data(int index, absl::string_view value) {
  _internal_mutable_data()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::add_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::add_data(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::add_data(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::add_data(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sql.player_info_kv_int.data)
}
inline void player_info_kv_int::add_data(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:sql.player_info_kv_int.data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
player_info_kv_int::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sql.player_info_kv_int.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
player_info_kv_int::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sql.player_info_kv_int.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
player_info_kv_int::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
player_info_kv_int::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// player_info_kv_str

// repeated string data = 1;
inline int player_info_kv_str::_internal_data_size() const {
  return _internal_data().size();
}
inline int player_info_kv_str::data_size() const {
  return _internal_data_size();
}
inline void player_info_kv_str::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline std::string* player_info_kv_str::add_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:sql.player_info_kv_str.data)
  return _s;
}
inline const std::string& player_info_kv_str::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_info_kv_str.data)
  return _internal_data().Get(index);
}
inline std::string* player_info_kv_str::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sql.player_info_kv_str.data)
  return _internal_mutable_data()->Mutable(index);
}
inline void player_info_kv_str::set_data(int index, const std::string& value) {
  _internal_mutable_data()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::set_data(int index, std::string&& value) {
  _internal_mutable_data()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::set_data(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_data()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::set_data(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_data()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::set_data(int index, absl::string_view value) {
  _internal_mutable_data()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::add_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::add_data(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::add_data(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::add_data(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sql.player_info_kv_str.data)
}
inline void player_info_kv_str::add_data(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:sql.player_info_kv_str.data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
player_info_kv_str::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sql.player_info_kv_str.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
player_info_kv_str::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sql.player_info_kv_str.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
player_info_kv_str::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
player_info_kv_str::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// player_single_info

// uint64 guid = 1;
inline void player_single_info::clear_guid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guid_ = ::uint64_t{0u};
}
inline ::uint64_t player_single_info::guid() const {
  // @@protoc_insertion_point(field_get:sql.player_single_info.guid)
  return _internal_guid();
}
inline void player_single_info::set_guid(::uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:sql.player_single_info.guid)
}
inline ::uint64_t player_single_info::_internal_guid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.guid_;
}
inline void player_single_info::_internal_set_guid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guid_ = value;
}

// bytes uuid = 2;
inline void player_single_info::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& player_single_info::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_single_info.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void player_single_info::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sql.player_single_info.uuid)
}
inline std::string* player_single_info::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:sql.player_single_info.uuid)
  return _s;
}
inline const std::string& player_single_info::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void player_single_info::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* player_single_info::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* player_single_info::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sql.player_single_info.uuid)
  return _impl_.uuid_.Release();
}
inline void player_single_info::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uuid_.IsDefault()) {
          _impl_.uuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sql.player_single_info.uuid)
}

// string names = 3;
inline void player_single_info::clear_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.names_.ClearToEmpty();
}
inline const std::string& player_single_info::names() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_single_info.names)
  return _internal_names();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void player_single_info::set_names(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.names_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sql.player_single_info.names)
}
inline std::string* player_single_info::mutable_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_names();
  // @@protoc_insertion_point(field_mutable:sql.player_single_info.names)
  return _s;
}
inline const std::string& player_single_info::_internal_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.names_.Get();
}
inline void player_single_info::_internal_set_names(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.names_.Set(value, GetArena());
}
inline std::string* player_single_info::_internal_mutable_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.names_.Mutable( GetArena());
}
inline std::string* player_single_info::release_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sql.player_single_info.names)
  return _impl_.names_.Release();
}
inline void player_single_info::set_allocated_names(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.names_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.names_.IsDefault()) {
          _impl_.names_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sql.player_single_info.names)
}

// int32 avatar = 4;
inline void player_single_info::clear_avatar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avatar_ = 0;
}
inline ::int32_t player_single_info::avatar() const {
  // @@protoc_insertion_point(field_get:sql.player_single_info.avatar)
  return _internal_avatar();
}
inline void player_single_info::set_avatar(::int32_t value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:sql.player_single_info.avatar)
}
inline ::int32_t player_single_info::_internal_avatar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avatar_;
}
inline void player_single_info::_internal_set_avatar(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avatar_ = value;
}

// -------------------------------------------------------------------

// player_info

// .sql.player_single_info single = 1;
inline bool player_info::has_single() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.single_ != nullptr);
  return value;
}
inline void player_info::clear_single() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.single_ != nullptr) _impl_.single_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sql::player_single_info& player_info::_internal_single() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sql::player_single_info* p = _impl_.single_;
  return p != nullptr ? *p : reinterpret_cast<const ::sql::player_single_info&>(::sql::_player_single_info_default_instance_);
}
inline const ::sql::player_single_info& player_info::single() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_info.single)
  return _internal_single();
}
inline void player_info::unsafe_arena_set_allocated_single(::sql::player_single_info* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.single_);
  }
  _impl_.single_ = reinterpret_cast<::sql::player_single_info*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sql.player_info.single)
}
inline ::sql::player_single_info* player_info::release_single() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sql::player_single_info* released = _impl_.single_;
  _impl_.single_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sql::player_single_info* player_info::unsafe_arena_release_single() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sql.player_info.single)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sql::player_single_info* temp = _impl_.single_;
  _impl_.single_ = nullptr;
  return temp;
}
inline ::sql::player_single_info* player_info::_internal_mutable_single() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.single_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sql::player_single_info>(GetArena());
    _impl_.single_ = reinterpret_cast<::sql::player_single_info*>(p);
  }
  return _impl_.single_;
}
inline ::sql::player_single_info* player_info::mutable_single() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sql::player_single_info* _msg = _internal_mutable_single();
  // @@protoc_insertion_point(field_mutable:sql.player_info.single)
  return _msg;
}
inline void player_info::set_allocated_single(::sql::player_single_info* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.single_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.single_ = reinterpret_cast<::sql::player_single_info*>(value);
  // @@protoc_insertion_point(field_set_allocated:sql.player_info.single)
}

// .sql.player_info_array array = 2;
inline bool player_info::has_array() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.array_ != nullptr);
  return value;
}
inline void player_info::clear_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.array_ != nullptr) _impl_.array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sql::player_info_array& player_info::_internal_array() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sql::player_info_array* p = _impl_.array_;
  return p != nullptr ? *p : reinterpret_cast<const ::sql::player_info_array&>(::sql::_player_info_array_default_instance_);
}
inline const ::sql::player_info_array& player_info::array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_info.array)
  return _internal_array();
}
inline void player_info::unsafe_arena_set_allocated_array(::sql::player_info_array* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.array_);
  }
  _impl_.array_ = reinterpret_cast<::sql::player_info_array*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sql.player_info.array)
}
inline ::sql::player_info_array* player_info::release_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sql::player_info_array* released = _impl_.array_;
  _impl_.array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sql::player_info_array* player_info::unsafe_arena_release_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sql.player_info.array)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sql::player_info_array* temp = _impl_.array_;
  _impl_.array_ = nullptr;
  return temp;
}
inline ::sql::player_info_array* player_info::_internal_mutable_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.array_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sql::player_info_array>(GetArena());
    _impl_.array_ = reinterpret_cast<::sql::player_info_array*>(p);
  }
  return _impl_.array_;
}
inline ::sql::player_info_array* player_info::mutable_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sql::player_info_array* _msg = _internal_mutable_array();
  // @@protoc_insertion_point(field_mutable:sql.player_info.array)
  return _msg;
}
inline void player_info::set_allocated_array(::sql::player_info_array* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.array_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.array_ = reinterpret_cast<::sql::player_info_array*>(value);
  // @@protoc_insertion_point(field_set_allocated:sql.player_info.array)
}

// .sql.player_info_kv_int kv_int = 3;
inline bool player_info::has_kv_int() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kv_int_ != nullptr);
  return value;
}
inline void player_info::clear_kv_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kv_int_ != nullptr) _impl_.kv_int_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sql::player_info_kv_int& player_info::_internal_kv_int() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sql::player_info_kv_int* p = _impl_.kv_int_;
  return p != nullptr ? *p : reinterpret_cast<const ::sql::player_info_kv_int&>(::sql::_player_info_kv_int_default_instance_);
}
inline const ::sql::player_info_kv_int& player_info::kv_int() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_info.kv_int)
  return _internal_kv_int();
}
inline void player_info::unsafe_arena_set_allocated_kv_int(::sql::player_info_kv_int* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kv_int_);
  }
  _impl_.kv_int_ = reinterpret_cast<::sql::player_info_kv_int*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sql.player_info.kv_int)
}
inline ::sql::player_info_kv_int* player_info::release_kv_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sql::player_info_kv_int* released = _impl_.kv_int_;
  _impl_.kv_int_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sql::player_info_kv_int* player_info::unsafe_arena_release_kv_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sql.player_info.kv_int)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sql::player_info_kv_int* temp = _impl_.kv_int_;
  _impl_.kv_int_ = nullptr;
  return temp;
}
inline ::sql::player_info_kv_int* player_info::_internal_mutable_kv_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kv_int_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sql::player_info_kv_int>(GetArena());
    _impl_.kv_int_ = reinterpret_cast<::sql::player_info_kv_int*>(p);
  }
  return _impl_.kv_int_;
}
inline ::sql::player_info_kv_int* player_info::mutable_kv_int() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sql::player_info_kv_int* _msg = _internal_mutable_kv_int();
  // @@protoc_insertion_point(field_mutable:sql.player_info.kv_int)
  return _msg;
}
inline void player_info::set_allocated_kv_int(::sql::player_info_kv_int* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.kv_int_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.kv_int_ = reinterpret_cast<::sql::player_info_kv_int*>(value);
  // @@protoc_insertion_point(field_set_allocated:sql.player_info.kv_int)
}

// .sql.player_info_kv_str kv_str = 4;
inline bool player_info::has_kv_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kv_str_ != nullptr);
  return value;
}
inline void player_info::clear_kv_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kv_str_ != nullptr) _impl_.kv_str_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::sql::player_info_kv_str& player_info::_internal_kv_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sql::player_info_kv_str* p = _impl_.kv_str_;
  return p != nullptr ? *p : reinterpret_cast<const ::sql::player_info_kv_str&>(::sql::_player_info_kv_str_default_instance_);
}
inline const ::sql::player_info_kv_str& player_info::kv_str() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sql.player_info.kv_str)
  return _internal_kv_str();
}
inline void player_info::unsafe_arena_set_allocated_kv_str(::sql::player_info_kv_str* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kv_str_);
  }
  _impl_.kv_str_ = reinterpret_cast<::sql::player_info_kv_str*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sql.player_info.kv_str)
}
inline ::sql::player_info_kv_str* player_info::release_kv_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sql::player_info_kv_str* released = _impl_.kv_str_;
  _impl_.kv_str_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sql::player_info_kv_str* player_info::unsafe_arena_release_kv_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sql.player_info.kv_str)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sql::player_info_kv_str* temp = _impl_.kv_str_;
  _impl_.kv_str_ = nullptr;
  return temp;
}
inline ::sql::player_info_kv_str* player_info::_internal_mutable_kv_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kv_str_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sql::player_info_kv_str>(GetArena());
    _impl_.kv_str_ = reinterpret_cast<::sql::player_info_kv_str*>(p);
  }
  return _impl_.kv_str_;
}
inline ::sql::player_info_kv_str* player_info::mutable_kv_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sql::player_info_kv_str* _msg = _internal_mutable_kv_str();
  // @@protoc_insertion_point(field_mutable:sql.player_info.kv_str)
  return _msg;
}
inline void player_info::set_allocated_kv_str(::sql::player_info_kv_str* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.kv_str_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.kv_str_ = reinterpret_cast<::sql::player_info_kv_str*>(value);
  // @@protoc_insertion_point(field_set_allocated:sql.player_info.kv_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sql


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sqlop_2eproto_2epb_2eh
